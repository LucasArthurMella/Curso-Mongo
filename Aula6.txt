db.students.find({});
//makes the second field to be disabled
db.students.find({}, {_id: 0});

//limit to an amount to be returned
db.students.find({}, {_id: 0}).limit(3);

//sort, 1 puts in alphabetical order(ascending order) and -1 to unaphabetical order(descending order) acording to variable selected
db.students.find({}, {_id: 0}).sort({gpa:-1, major:1});

//the first {} is actually where our filter will be, in this case it will return all entries where the value equals the value of major
db.students.find({major: "Biology"},{_id:0});
db.students.find({major: "Biology", name: "Jack"},{_id:0});

//Challenge: find all studens who are chemistry majors or named Jack
//$or: the structure is at follow, $or followed by a [] and inside the [] multiple {} with the conditions, it returns if any of the conditions inside are true.
db.students.find({$or: [{major: "Chemistry"}, {name: "Jack"}]},{_id:0});


// $gt: used to find all resulties who value of variable is greater than specified, structure is as follows: name of the variable, followd by {} and inside it the $gt operator with the value (gte is valid if you want greater or equal):
db.students.find({gpa: {$gt: 3.5}},{_id:0});	

// $lte: same as $gt but used for less than instead of greater than (lte is valid if you want lesser or equal)
db.students.find({gpa: {$lte: 3.2}},{_id: 0}).sort({gpa:-1});

//all operators: $eq, $ne, $lt, $lte, $gt, $gte

//$in serves to return any documents that have any values equal to the ones inside of the [] brackets relative to that variable before $in
//$nin would be the opposite.
db.students.find({name: {$in: ["Kate","Claire"]}},{_id: 0});

//$exists: will return all documents where specified element exists:
db.students.find({awards: {$exists: true} }, {_id:0});

//$type: in some cases some variables on collections dispite being of a certain type can have diferent types on different columns, for this reason there is the atribute $type, where you will only return the documents where a certain column will have a certain type, in this case you would only return columns where the name variable is of type string:
db.students.find({name: {$type: 2}},{_id:0});

//apliccable for an array, specify the array index and the required value this index should have in order for the document to be appeared, should have "".
db.students.find({"grades.0": 90},{_id:0});

//$elemMatch will return results where the specified value is equal to any index of certain array:
db.students.find({grades: {$elemMatch: {$gte: 80}} },{_id: 0});
db.students.find({grades: {$elemMatch: {$eq: 90}} },{_id: 0});

//$size return any columns that have an array of the specified size.
db.students.find({grades: {$size: 4}},{_id: 0});


